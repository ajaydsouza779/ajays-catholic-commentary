// Ajay's Catholic Commentary - Database Schema (PostgreSQL for Production)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model for authentication and user management
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  passwordHash  String?
  role          Role      @default(USER)
  image         String?
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  posts         Post[]
  comments      Comment[]
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

// Account model for OAuth providers
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

// Session model for NextAuth.js
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Verification token model for NextAuth.js
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Post model for blog posts
model Post {
  id            String      @id @default(cuid())
  title         String
  slug          String      @unique
  content       String
  excerpt       String?
  featuredImage String?
  status        PostStatus  @default(DRAFT)
  publishedAt   DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  authorId      String
  author        User        @relation(fields: [authorId], references: [id])
  comments      Comment[]
  categories    PostCategory[]
  tags          PostTag[]

  @@map("posts")
}

// Comment model for post comments
model Comment {
  id        String        @id @default(cuid())
  content   String
  status    CommentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  postId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  authorId  String?       // Optional for guest comments
  author    User?         @relation(fields: [authorId], references: [id])
  parentId  String?
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentReplies")

  // Guest comment fields
  guestName String?       // Name for guest comments
  guestEmail String?      // Optional email for guest comments

  @@map("comments")
}

// Category model for post categorization
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  posts       PostCategory[]

  @@map("categories")
}

// Tag model for post tagging
model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  posts     PostTag[]

  @@map("tags")
}

// Junction table for Post-Category many-to-many relationship
model PostCategory {
  postId     String
  categoryId String

  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
  @@map("post_categories")
}

// Junction table for Post-Tag many-to-many relationship
model PostTag {
  postId String
  tagId  String

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
  @@map("post_tags")
}

// Enums
enum Role {
  USER
  ADMIN
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

// Site settings for admin-configurable content
model SiteSettings {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Papal Timeline models
model Pope {
  id              String   @id @default(cuid())
  name            String
  regnalName      String   // e.g., "Pope Francis"
  birthName       String?  // e.g., "Jorge Mario Bergoglio"
  birthDate       DateTime?
  deathDate       DateTime?
  papacyStart     DateTime
  papacyEnd       DateTime?
  papacyNumber    Int      // e.g., 266 for Pope Francis
  nationality     String?
  previousOffice  String?  // e.g., "Archbishop of Buenos Aires"
  notableEvents   String?  // JSON string of major events
  biography       String?  // Detailed biography
  imageUrl        String?  // Portrait image
  historicalContext String? // Historical context and sources
  references      String?  // JSON string of references/sources
  isCurrent       Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  events          PapalEvent[]
  achievements    PapalAchievement[]
  divisions       ChurchDivision[] @relation("PopeDivisions")

  @@map("popes")
}

model PapalEvent {
  id          String   @id @default(cuid())
  title       String
  description String
  eventDate   DateTime
  eventType   PapalEventType
  location    String?
  significance String? // Brief note on historical significance
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  popeId      String
  pope        Pope     @relation(fields: [popeId], references: [id], onDelete: Cascade)

  @@map("papal_events")
}

model PapalAchievement {
  id          String   @id @default(cuid())
  title       String
  description String
  category    PapalAchievementCategory
  year        Int?
  significance String? // Historical impact
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  popeId      String
  pope        Pope     @relation(fields: [popeId], references: [id], onDelete: Cascade)

  @@map("papal_achievements")
}

// Church Division models
model ChurchDivision {
  id          String   @id @default(cuid())
  name        String
  description String
  year        Int
  cause       String?  // What caused the division
  outcome     String?  // Result of the division
  parentId    String?  // For hierarchical divisions
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  parent      ChurchDivision? @relation("DivisionHierarchy", fields: [parentId], references: [id])
  children    ChurchDivision[] @relation("DivisionHierarchy")
  relatedPopes Pope[]         @relation("PopeDivisions")

  @@map("church_divisions")
}

// Bible History models
model BibleManuscript {
  id          String   @id @default(cuid())
  name        String
  description String
  date        String   // e.g., "4th century AD"
  language    String
  location    String?  // Where it was found/kept
  significance String? // Why it's important
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("bible_manuscripts")
}

model BibleTranslation {
  id          String   @id @default(cuid())
  name        String
  language    String
  year        Int
  translator  String?
  description String
  significance String? // Historical importance
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("bible_translations")
}

// Enums for new models
enum PapalEventType {
  ELECTION
  CORONATION
  CANONIZATION
  COUNCIL
  ENCYCLICAL
  TRAVEL
  MEETING
  OTHER
}

enum PapalAchievementCategory {
  DOCTRINE
  REFORM
  DIPLOMACY
  CANONIZATION
  COUNCIL
  MISSIONARY
  EDUCATION
  SOCIAL_JUSTICE
  OTHER
}


